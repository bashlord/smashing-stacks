Buffer overflow but using a virtual method return address since the stack is protected and marked as non executable
Sploit 3 took in 3 parameters that would test the length and string for the overflow manipulation.  The difference between this sploit and the other was that the stack was protected with a non executable stack as well as a stack protector that would check the value of the cookie that would be passed in when the fucntion returned.  A way around this was to insert the shellcode in a way where you would would overwrite the return address of the virtual function getLen() with the address of the shellcode, which existed in the buffer.  Since the function was offset by 12 in the vtable, the initial address that would need to be overwritten would need to be 12 bytes before the address of the shellcode, which would then jump to the shellcode once it did the offsets.  Since it is a virtual function and the stacks used are dynamic, there would be no protection that would prevent the overflow.